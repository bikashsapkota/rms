version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: rms_postgres
    environment:
      POSTGRES_DB: rms_dev
      POSTGRES_USER: rms_user
      POSTGRES_PASSWORD: rms_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rms_user -d rms_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_test:
    image: postgres:15-alpine
    container_name: rms_postgres_test
    environment:
      POSTGRES_DB: rms_test
      POSTGRES_USER: rms_user
      POSTGRES_PASSWORD: rms_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - rms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rms_user -d rms_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rms_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rms_api
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - uploads_data:/app/uploads
    environment:
      DATABASE_URL: postgresql://rms_user:rms_pass@postgres:5432/rms_dev
      TEST_DATABASE_URL: postgresql://rms_user:rms_pass@postgres_test:5432/rms_test
      REDIS_URL: redis://redis:6379/0
      DEBUG: "True"
    depends_on:
      postgres:
        condition: service_healthy
      postgres_test:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rms_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        uv run alembic upgrade head &&
        echo 'Starting development server...' &&
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  rms_network:
    driver: bridge
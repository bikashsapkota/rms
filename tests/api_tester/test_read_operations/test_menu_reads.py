#!/usr/bin/env python3
"""
Test Menu Read Operations

Comprehensive testing of all menu-related GET endpoints.
Tests menu categories, items, modifiers, and related functionality.
"""

import sys
import asyncio
import time
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from tests.api_tester.shared.utils import APITestClient, APITestHelper, TestResults
from tests.api_tester.shared.auth import get_auth_headers


class MenuReadTester:
    """Comprehensive menu read operations testing"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = APITestClient(base_url)
        self.results = TestResults()
        self.auth_headers = None
        
    async def setup_authentication(self) -> bool:
        """Setup authentication for all tests"""
        
        self.auth_headers = await get_auth_headers(self.client)
        if not self.auth_headers:
            APITestHelper.print_test_step("Authentication failed - cannot run menu tests", "FAILED")
            return False
            
        APITestHelper.print_test_step("Authentication successful", "SUCCESS")
        return True
        
    async def test_menu_categories_list(self) -> bool:
        """Test listing menu categories"""
        
        APITestHelper.print_test_header("Menu Categories List", "📂")
        
        try:
            start_time = time.time()
            response = await self.client.get("/api/v1/menu/categories", headers=self.auth_headers)
            response_time = (time.time() - start_time) * 1000
            
            if response.status_code == 200:
                categories = response.json()
                
                APITestHelper.print_test_step(f"Categories endpoint responding ({response_time:.0f}ms)", "SUCCESS")
                
                # Validate response structure
                if isinstance(categories, list):\n                    category_count = len(categories)\n                    APITestHelper.print_test_step(f\"Found {category_count} categories (list format)\", \"SUCCESS\")\n                    \n                    # Validate individual category structure\n                    if categories:\n                        sample_category = categories[0]\n                        if APITestHelper.validate_menu_item_response(sample_category):\n                            APITestHelper.print_test_step(\"Category data structure is valid\", \"SUCCESS\")\n                        else:\n                            APITestHelper.print_test_step(\"Category data structure is invalid\", \"FAILED\")\n                            \n                        # Print sample category details\n                        print(f\"   📄 Sample Category:\")\n                        print(f\"      Name: {sample_category.get('name', 'N/A')}\")\n                        print(f\"      ID: {sample_category.get('id', 'N/A')}\")\n                        print(f\"      Sort Order: {sample_category.get('sort_order', 'N/A')}\")\n                        \n                elif isinstance(categories, dict):\n                    # Paginated response\n                    items = categories.get('items', [])\n                    total = categories.get('total', 0)\n                    page = categories.get('page', 1)\n                    size = categories.get('size', len(items))\n                    \n                    APITestHelper.print_test_step(f\"Found {len(items)} categories (paginated: {total} total)\", \"SUCCESS\")\n                    print(f\"   📊 Pagination: Page {page}, Size {size}, Total {total}\")\n                    \n                    if items:\n                        sample_category = items[0]\n                        print(f\"   📄 Sample Category: {sample_category.get('name', 'N/A')}\")\n                        \n                else:\n                    APITestHelper.print_test_step(\"Unexpected response format\", \"FAILED\")\n                    \n                self.results.add_success(\"menu_categories\", \"List categories\", {\n                    \"response_time\": response_time,\n                    \"count\": category_count if isinstance(categories, list) else len(categories.get('items', [])),\n                    \"format\": \"list\" if isinstance(categories, list) else \"paginated\"\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"No categories found (empty system)\", \"SUCCESS\")\n                self.results.add_success(\"menu_categories\", \"List categories (empty)\", {\n                    \"response_time\": response_time,\n                    \"count\": 0\n                })\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Categories list failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"menu_categories\", \"List categories\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Categories list error: {e}\", \"FAILED\")\n            self.results.add_failure(\"menu_categories\", \"List categories\", str(e))\n            return False\n            \n    async def test_menu_category_details(self, category_id: str = None) -> bool:\n        \"\"\"Test getting individual category details\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Category Details\", \"📄\")\n        \n        # First get a category ID if not provided\n        if not category_id:\n            try:\n                response = await self.client.get(\"/api/v1/menu/categories\", headers=self.auth_headers)\n                if response.status_code == 200:\n                    categories = response.json()\n                    \n                    if isinstance(categories, list) and categories:\n                        category_id = categories[0]['id']\n                    elif isinstance(categories, dict) and categories.get('items'):\n                        category_id = categories['items'][0]['id']\n                    else:\n                        APITestHelper.print_test_step(\"No categories available for detail testing\", \"SKIPPED\")\n                        return True\n                else:\n                    APITestHelper.print_test_step(\"Cannot fetch categories for detail testing\", \"SKIPPED\")\n                    return True\n            except Exception:\n                APITestHelper.print_test_step(\"Cannot fetch categories for detail testing\", \"SKIPPED\")\n                return True\n                \n        try:\n            start_time = time.time()\n            response = await self.client.get(f\"/api/v1/menu/categories/{category_id}\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                category = response.json()\n                \n                APITestHelper.print_test_step(f\"Category details retrieved ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                # Validate category structure\n                required_fields = ['id', 'name']\n                if all(field in category for field in required_fields):\n                    APITestHelper.print_test_step(\"Category details structure is valid\", \"SUCCESS\")\n                    \n                    print(f\"   📄 Category Details:\")\n                    print(f\"      Name: {category.get('name')}\")\n                    print(f\"      Description: {category.get('description', 'N/A')}\")\n                    print(f\"      Sort Order: {category.get('sort_order', 'N/A')}\")\n                    print(f\"      Active: {category.get('is_active', 'N/A')}\")\n                    \n                else:\n                    APITestHelper.print_test_step(\"Category details missing required fields\", \"FAILED\")\n                    \n                self.results.add_success(\"menu_categories\", \"Category details\", {\n                    \"response_time\": response_time,\n                    \"category_id\": category_id,\n                    \"category_name\": category.get('name')\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(f\"Category {category_id} not found\", \"FAILED\")\n                self.results.add_failure(\"menu_categories\", \"Category details\", \n                                       f\"Category not found: {category_id}\", 404)\n                return False\n                \n            else:\n                APITestHelper.print_test_step(f\"Category details failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"menu_categories\", \"Category details\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Category details error: {e}\", \"FAILED\")\n            self.results.add_failure(\"menu_categories\", \"Category details\", str(e))\n            return False\n            \n    async def test_menu_items_list(self) -> bool:\n        \"\"\"Test listing menu items\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Items List\", \"🍽️\")\n        \n        try:\n            start_time = time.time()\n            response = await self.client.get(\"/api/v1/menu/items\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                items = response.json()\n                \n                APITestHelper.print_test_step(f\"Menu items endpoint responding ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                # Validate response structure\n                if isinstance(items, list):\n                    item_count = len(items)\n                    APITestHelper.print_test_step(f\"Found {item_count} menu items (list format)\", \"SUCCESS\")\n                    \n                    # Validate individual item structure\n                    if items:\n                        sample_item = items[0]\n                        if APITestHelper.validate_menu_item_response(sample_item):\n                            APITestHelper.print_test_step(\"Menu item data structure is valid\", \"SUCCESS\")\n                        else:\n                            APITestHelper.print_test_step(\"Menu item data structure is invalid\", \"FAILED\")\n                            \n                        # Print sample item details\n                        print(f\"   🍽️  Sample Menu Item:\")\n                        print(f\"      Name: {sample_item.get('name', 'N/A')}\")\n                        print(f\"      Price: ${sample_item.get('price', 'N/A')}\")\n                        print(f\"      Available: {sample_item.get('is_available', 'N/A')}\")\n                        print(f\"      Category ID: {sample_item.get('category_id', 'N/A')}\")\n                        \n                elif isinstance(items, dict):\n                    # Paginated response\n                    item_list = items.get('items', [])\n                    total = items.get('total', 0)\n                    page = items.get('page', 1)\n                    size = items.get('size', len(item_list))\n                    \n                    APITestHelper.print_test_step(f\"Found {len(item_list)} items (paginated: {total} total)\", \"SUCCESS\")\n                    print(f\"   📊 Pagination: Page {page}, Size {size}, Total {total}\")\n                    \n                    if item_list:\n                        sample_item = item_list[0]\n                        print(f\"   🍽️  Sample Item: {sample_item.get('name', 'N/A')} - ${sample_item.get('price', 'N/A')}\")\n                        \n                else:\n                    APITestHelper.print_test_step(\"Unexpected response format\", \"FAILED\")\n                    \n                self.results.add_success(\"menu_items\", \"List items\", {\n                    \"response_time\": response_time,\n                    \"count\": item_count if isinstance(items, list) else len(items.get('items', [])),\n                    \"format\": \"list\" if isinstance(items, list) else \"paginated\"\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"No menu items found (empty system)\", \"SUCCESS\")\n                self.results.add_success(\"menu_items\", \"List items (empty)\", {\n                    \"response_time\": response_time,\n                    \"count\": 0\n                })\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Menu items list failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"menu_items\", \"List items\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Menu items list error: {e}\", \"FAILED\")\n            self.results.add_failure(\"menu_items\", \"List items\", str(e))\n            return False\n            \n    async def test_menu_item_details(self, item_id: str = None) -> bool:\n        \"\"\"Test getting individual menu item details\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Item Details\", \"🍕\")\n        \n        # First get an item ID if not provided\n        if not item_id:\n            try:\n                response = await self.client.get(\"/api/v1/menu/items\", headers=self.auth_headers)\n                if response.status_code == 200:\n                    items = response.json()\n                    \n                    if isinstance(items, list) and items:\n                        item_id = items[0]['id']\n                    elif isinstance(items, dict) and items.get('items'):\n                        item_id = items['items'][0]['id']\n                    else:\n                        APITestHelper.print_test_step(\"No menu items available for detail testing\", \"SKIPPED\")\n                        return True\n                else:\n                    APITestHelper.print_test_step(\"Cannot fetch menu items for detail testing\", \"SKIPPED\")\n                    return True\n            except Exception:\n                APITestHelper.print_test_step(\"Cannot fetch menu items for detail testing\", \"SKIPPED\")\n                return True\n                \n        try:\n            start_time = time.time()\n            response = await self.client.get(f\"/api/v1/menu/items/{item_id}\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                item = response.json()\n                \n                APITestHelper.print_test_step(f\"Menu item details retrieved ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                # Validate item structure\n                if APITestHelper.validate_menu_item_response(item):\n                    APITestHelper.print_test_step(\"Menu item details structure is valid\", \"SUCCESS\")\n                    \n                    print(f\"   🍽️  Item Details:\")\n                    print(f\"      Name: {item.get('name')}\")\n                    print(f\"      Description: {item.get('description', 'N/A')}\")\n                    print(f\"      Price: ${item.get('price')}\")\n                    print(f\"      Available: {item.get('is_available')}\")\n                    print(f\"      Category: {item.get('category_id', 'N/A')}\")\n                    print(f\"      Image: {item.get('image_url', 'N/A')}\")\n                    \n                else:\n                    APITestHelper.print_test_step(\"Menu item details missing required fields\", \"FAILED\")\n                    \n                self.results.add_success(\"menu_items\", \"Item details\", {\n                    \"response_time\": response_time,\n                    \"item_id\": item_id,\n                    \"item_name\": item.get('name'),\n                    \"price\": item.get('price')\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(f\"Menu item {item_id} not found\", \"FAILED\")\n                self.results.add_failure(\"menu_items\", \"Item details\", \n                                       f\"Item not found: {item_id}\", 404)\n                return False\n                \n            else:\n                APITestHelper.print_test_step(f\"Menu item details failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"menu_items\", \"Item details\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Menu item details error: {e}\", \"FAILED\")\n            self.results.add_failure(\"menu_items\", \"Item details\", str(e))\n            return False\n            \n    async def test_menu_filtering_and_search(self) -> bool:\n        \"\"\"Test menu filtering and search functionality\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Filtering & Search\", \"🔍\")\n        \n        # Test various filtering scenarios\n        filter_tests = [\n            (\"/api/v1/menu/items?available=true\", \"Available items only\"),\n            (\"/api/v1/menu/items?available=false\", \"Unavailable items\"),\n            (\"/api/v1/menu/items?limit=5\", \"Limited results\"),\n            (\"/api/v1/menu/items?search=pizza\", \"Search for 'pizza'\"),\n            (\"/api/v1/menu/categories?sort_order=asc\", \"Categories by sort order\")\n        ]\n        \n        all_success = True\n        \n        for endpoint, description in filter_tests:\n            try:\n                start_time = time.time()\n                response = await self.client.get(endpoint, headers=self.auth_headers)\n                response_time = (time.time() - start_time) * 1000\n                \n                if response.status_code in [200, 404]:  # 404 is OK for no results\n                    APITestHelper.print_test_step(f\"{description} ({response_time:.0f}ms)\", \"SUCCESS\")\n                    \n                    if response.status_code == 200:\n                        data = response.json()\n                        if isinstance(data, list):\n                            count = len(data)\n                        elif isinstance(data, dict) and 'items' in data:\n                            count = len(data['items'])\n                        else:\n                            count = 0\n                            \n                        print(f\"   📊 Results: {count} items\")\n                        \n                    self.results.add_success(\"menu_filtering\", description, {\n                        \"endpoint\": endpoint,\n                        \"response_time\": response_time,\n                        \"status_code\": response.status_code\n                    })\n                    \n                else:\n                    APITestHelper.print_test_step(f\"{description} failed: HTTP {response.status_code}\", \"FAILED\")\n                    self.results.add_failure(\"menu_filtering\", description, \n                                           f\"HTTP {response.status_code}\", response.status_code)\n                    all_success = False\n                    \n                # Small delay between requests\n                await asyncio.sleep(0.2)\n                \n            except Exception as e:\n                APITestHelper.print_test_step(f\"{description} error: {e}\", \"FAILED\")\n                self.results.add_failure(\"menu_filtering\", description, str(e))\n                all_success = False\n                \n        return all_success\n        \n    async def test_public_menu_access(self) -> bool:\n        \"\"\"Test public menu access (no authentication required)\"\"\"\n        \n        APITestHelper.print_test_header(\"Public Menu Access\", \"🌐\")\n        \n        # Test public endpoints without authentication\n        public_endpoints = [\n            (\"/api/v1/menu/public\", \"Public menu\"),\n            (\"/api/v1/public/menu\", \"Alternative public menu\"),\n            (\"/public/menu\", \"Simple public menu\")\n        ]\n        \n        success_found = False\n        \n        for endpoint, description in public_endpoints:\n            try:\n                start_time = time.time()\n                # Test without authentication headers\n                response = await self.client.get(endpoint)\n                response_time = (time.time() - start_time) * 1000\n                \n                if response.status_code == 200:\n                    APITestHelper.print_test_step(f\"{description} accessible ({response_time:.0f}ms)\", \"SUCCESS\")\n                    \n                    menu_data = response.json()\n                    if isinstance(menu_data, list):\n                        count = len(menu_data)\n                    elif isinstance(menu_data, dict):\n                        count = len(menu_data.get('items', []))\n                    else:\n                        count = 0\n                        \n                    print(f\"   🌐 Public menu items: {count}\")\n                    \n                    self.results.add_success(\"public_menu\", description, {\n                        \"endpoint\": endpoint,\n                        \"response_time\": response_time,\n                        \"item_count\": count\n                    })\n                    success_found = True\n                    \n                elif response.status_code == 404:\n                    APITestHelper.print_test_step(f\"{description} not found (may not be implemented)\", \"SKIPPED\")\n                    \n                elif response.status_code == 401:\n                    APITestHelper.print_test_step(f\"{description} requires authentication\", \"SKIPPED\")\n                    \n                else:\n                    APITestHelper.print_test_step(f\"{description} failed: HTTP {response.status_code}\", \"FAILED\")\n                    \n                await asyncio.sleep(0.1)\n                \n            except Exception as e:\n                APITestHelper.print_test_step(f\"{description} error: {e}\", \"FAILED\")\n                \n        if not success_found:\n            APITestHelper.print_test_step(\"No public menu endpoints found (may not be implemented yet)\", \"SKIPPED\")\n            \n        return True  # Not a failure if public menu isn't implemented\n        \n    async def test_menu_modifiers(self) -> bool:\n        \"\"\"Test menu modifiers if supported\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Modifiers\", \"🔧\")\n        \n        try:\n            start_time = time.time()\n            response = await self.client.get(\"/api/v1/menu/modifiers\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                modifiers = response.json()\n                \n                APITestHelper.print_test_step(f\"Modifiers endpoint responding ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                if isinstance(modifiers, list):\n                    modifier_count = len(modifiers)\n                    APITestHelper.print_test_step(f\"Found {modifier_count} modifiers\", \"SUCCESS\")\n                    \n                    if modifiers:\n                        sample_modifier = modifiers[0]\n                        print(f\"   🔧 Sample Modifier:\")\n                        print(f\"      Name: {sample_modifier.get('name', 'N/A')}\")\n                        print(f\"      Type: {sample_modifier.get('type', 'N/A')}\")\n                        print(f\"      Price Adjustment: ${sample_modifier.get('price_adjustment', 'N/A')}\")\n                        \n                elif isinstance(modifiers, dict) and 'items' in modifiers:\n                    modifier_list = modifiers['items']\n                    APITestHelper.print_test_step(f\"Found {len(modifier_list)} modifiers (paginated)\", \"SUCCESS\")\n                    \n                self.results.add_success(\"menu_modifiers\", \"List modifiers\", {\n                    \"response_time\": response_time,\n                    \"count\": modifier_count if isinstance(modifiers, list) else len(modifiers.get('items', []))\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"Modifiers endpoint not found (may not be implemented)\", \"SKIPPED\")\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Modifiers failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"menu_modifiers\", \"List modifiers\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Modifiers error: {e}\", \"FAILED\")\n            self.results.add_failure(\"menu_modifiers\", \"List modifiers\", str(e))\n            return False\n            \n    def print_menu_test_summary(self):\n        \"\"\"Print comprehensive menu test summary\"\"\"\n        \n        APITestHelper.print_test_header(\"Menu Read Tests Summary\", \"📊\")\n        \n        print(f\"Total Tests: {self.results.total_tests}\")\n        print(f\"Passed: {self.results.passed_tests}\")\n        print(f\"Failed: {self.results.failed_tests}\")\n        print(f\"Success Rate: {self.results.success_rate:.1f}%\")\n        \n        # Group results by category\n        categories = {}\n        for result in self.results.results:\n            category = result.category\n            if category not in categories:\n                categories[category] = {\"passed\": 0, \"failed\": 0}\n                \n            if result.success:\n                categories[category][\"passed\"] += 1\n            else:\n                categories[category][\"failed\"] += 1\n                \n        print(f\"\\n📋 Results by Category:\")\n        for category, stats in categories.items():\n            total = stats[\"passed\"] + stats[\"failed\"]\n            rate = (stats[\"passed\"] / total) * 100 if total > 0 else 0\n            print(f\"   {category.replace('_', ' ').title()}: {stats['passed']}/{total} ({rate:.1f}%)\")\n            \n        # Performance summary\n        perf_results = [r for r in self.results.results if r.response_time > 0]\n        if perf_results:\n            avg_response_time = sum(r.response_time for r in perf_results) / len(perf_results)\n            print(f\"\\n⚡ Average Response Time: {avg_response_time:.0f}ms\")\n            \n        # Show failures if any\n        if self.results.failed_tests > 0:\n            print(f\"\\n❌ Failed Tests:\")\n            for result in self.results.results:\n                if not result.success:\n                    print(f\"   • {result.category}: {result.test_name} - {result.error_message}\")\n                    \n    async def run_comprehensive_menu_tests(self) -> bool:\n        \"\"\"Run all menu read tests\"\"\"\n        \n        print(\"🍽️  RMS Menu Read Operations Tests\")\n        print(\"=\"*50)\n        \n        start_time = time.time()\n        \n        try:\n            # Setup authentication\n            if not await self.setup_authentication():\n                return False\n                \n            # Run all menu tests\n            tests = [\n                (\"Menu Categories List\", self.test_menu_categories_list),\n                (\"Menu Category Details\", self.test_menu_category_details),\n                (\"Menu Items List\", self.test_menu_items_list),\n                (\"Menu Item Details\", self.test_menu_item_details),\n                (\"Menu Filtering & Search\", self.test_menu_filtering_and_search),\n                (\"Public Menu Access\", self.test_public_menu_access),\n                (\"Menu Modifiers\", self.test_menu_modifiers)\n            ]\n            \n            overall_success = True\n            \n            for test_name, test_func in tests:\n                try:\n                    success = await test_func()\n                    if not success:\n                        overall_success = False\n                        \n                except Exception as e:\n                    APITestHelper.print_test_step(f\"{test_name} failed with error: {e}\", \"FAILED\")\n                    self.results.add_failure(\"general\", test_name, str(e))\n                    overall_success = False\n                    \n                # Small delay between test categories\n                await asyncio.sleep(0.5)\n                \n            # Calculate execution time\n            self.results.execution_time = time.time() - start_time\n            \n            # Print summary\n            self.print_menu_test_summary()\n            \n            return overall_success\n            \n        except KeyboardInterrupt:\n            print(\"\\n⚠️  Menu tests interrupted by user\")\n            return False\n        except Exception as e:\n            print(f\"\\n❌ Menu tests failed: {e}\")\n            return False\n        finally:\n            await self.client.close()\n\n\nasync def main():\n    \"\"\"Main entry point for menu read testing\"\"\"\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Test RMS menu read operations\")\n    parser.add_argument(\"--base-url\", default=\"http://localhost:8000\", help=\"API base URL\")\n    \n    args = parser.parse_args()\n    \n    tester = MenuReadTester(args.base_url)\n    \n    try:\n        success = await tester.run_comprehensive_menu_tests()\n        \n        if success:\n            print(f\"\\n✅ All menu read tests passed successfully!\")\n        else:\n            print(f\"\\n❌ Some menu read tests failed\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"❌ Menu read testing failed: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
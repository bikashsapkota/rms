#!/usr/bin/env python3
"""
Test Restaurant Read Operations

Comprehensive testing of restaurant-related GET endpoints.
Tests restaurant listing, details, settings, and organizational data.
"""

import sys
import asyncio
import time
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from tests.api_tester.shared.utils import APITestClient, APITestHelper, TestResults
from tests.api_tester.shared.auth import get_auth_headers


class RestaurantReadTester:
    """Comprehensive restaurant read operations testing"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = APITestClient(base_url)
        self.results = TestResults()
        self.auth_headers = None
        
    async def setup_authentication(self) -> bool:
        """Setup authentication for all tests"""
        
        self.auth_headers = await get_auth_headers(self.client)
        if not self.auth_headers:
            APITestHelper.print_test_step("Authentication failed - cannot run restaurant tests", "FAILED")
            return False
            
        APITestHelper.print_test_step("Authentication successful", "SUCCESS")
        return True
        
    async def test_restaurants_list(self) -> bool:
        """Test listing restaurants"""
        
        APITestHelper.print_test_header("Restaurants List", "🏢")
        
        try:
            start_time = time.time()
            response = await self.client.get("/api/v1/restaurants", headers=self.auth_headers)
            response_time = (time.time() - start_time) * 1000
            
            if response.status_code == 200:
                restaurants = response.json()
                
                APITestHelper.print_test_step(f"Restaurants endpoint responding ({response_time:.0f}ms)", "SUCCESS")
                
                # Validate response structure
                if isinstance(restaurants, list):
                    restaurant_count = len(restaurants)
                    APITestHelper.print_test_step(f"Found {restaurant_count} restaurants (list format)", "SUCCESS")
                    
                    # Validate individual restaurant structure
                    if restaurants:
                        sample_restaurant = restaurants[0]
                        if APITestHelper.validate_restaurant_response(sample_restaurant):
                            APITestHelper.print_test_step("Restaurant data structure is valid", "SUCCESS")
                        else:
                            APITestHelper.print_test_step("Restaurant data structure is invalid", "FAILED")
                            
                        # Print sample restaurant details
                        print(f"   🏢 Sample Restaurant:")
                        print(f"      Name: {sample_restaurant.get('name', 'N/A')}")
                        print(f"      ID: {sample_restaurant.get('id', 'N/A')}")
                        
                        # Check address structure\n                        address = sample_restaurant.get('address', {})\n                        if isinstance(address, dict) and address:\n                            print(f\"      City: {address.get('city', 'N/A')}\")\n                            print(f\"      State: {address.get('state', 'N/A')}\")\n                            \n                        # Check settings\n                        settings = sample_restaurant.get('settings', {})\n                        if isinstance(settings, dict) and settings:\n                            print(f\"      Cuisine: {settings.get('cuisine_type', 'N/A')}\")\n                            print(f\"      Price Range: {settings.get('price_range', 'N/A')}\")\n                        \n                elif isinstance(restaurants, dict):\n                    # Paginated response\n                    items = restaurants.get('items', [])\n                    total = restaurants.get('total', 0)\n                    page = restaurants.get('page', 1)\n                    size = restaurants.get('size', len(items))\n                    \n                    APITestHelper.print_test_step(f\"Found {len(items)} restaurants (paginated: {total} total)\", \"SUCCESS\")\n                    print(f\"   📊 Pagination: Page {page}, Size {size}, Total {total}\")\n                    \n                    if items:\n                        sample_restaurant = items[0]\n                        print(f\"   🏢 Sample Restaurant: {sample_restaurant.get('name', 'N/A')}\")\n                        \n                else:\n                    APITestHelper.print_test_step(\"Unexpected response format\", \"FAILED\")\n                    \n                self.results.add_success(\"restaurants\", \"List restaurants\", {\n                    \"response_time\": response_time,\n                    \"count\": restaurant_count if isinstance(restaurants, list) else len(restaurants.get('items', [])),\n                    \"format\": \"list\" if isinstance(restaurants, list) else \"paginated\"\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"No restaurants found (empty system)\", \"SUCCESS\")\n                self.results.add_success(\"restaurants\", \"List restaurants (empty)\", {\n                    \"response_time\": response_time,\n                    \"count\": 0\n                })\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Restaurants list failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"restaurants\", \"List restaurants\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Restaurants list error: {e}\", \"FAILED\")\n            self.results.add_failure(\"restaurants\", \"List restaurants\", str(e))\n            return False\n            \n    async def test_restaurant_details(self, restaurant_id: str = None) -> bool:\n        \"\"\"Test getting individual restaurant details\"\"\"\n        \n        APITestHelper.print_test_header(\"Restaurant Details\", \"🏪\")\n        \n        # First get a restaurant ID if not provided\n        if not restaurant_id:\n            try:\n                response = await self.client.get(\"/api/v1/restaurants\", headers=self.auth_headers)\n                if response.status_code == 200:\n                    restaurants = response.json()\n                    \n                    if isinstance(restaurants, list) and restaurants:\n                        restaurant_id = restaurants[0]['id']\n                    elif isinstance(restaurants, dict) and restaurants.get('items'):\n                        restaurant_id = restaurants['items'][0]['id']\n                    else:\n                        APITestHelper.print_test_step(\"No restaurants available for detail testing\", \"SKIPPED\")\n                        return True\n                else:\n                    APITestHelper.print_test_step(\"Cannot fetch restaurants for detail testing\", \"SKIPPED\")\n                    return True\n            except Exception:\n                APITestHelper.print_test_step(\"Cannot fetch restaurants for detail testing\", \"SKIPPED\")\n                return True\n                \n        try:\n            start_time = time.time()\n            response = await self.client.get(f\"/api/v1/restaurants/{restaurant_id}\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                restaurant = response.json()\n                \n                APITestHelper.print_test_step(f\"Restaurant details retrieved ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                # Validate restaurant structure\n                if APITestHelper.validate_restaurant_response(restaurant):\n                    APITestHelper.print_test_step(\"Restaurant details structure is valid\", \"SUCCESS\")\n                    \n                    print(f\"   🏪 Restaurant Details:\")\n                    print(f\"      Name: {restaurant.get('name')}\")\n                    print(f\"      Email: {restaurant.get('email', 'N/A')}\")\n                    print(f\"      Phone: {restaurant.get('phone', 'N/A')}\")\n                    print(f\"      Active: {restaurant.get('is_active', 'N/A')}\")\n                    \n                    # Address details\n                    address = restaurant.get('address', {})\n                    if isinstance(address, dict) and address:\n                        print(f\"      Address:\")\n                        print(f\"         Street: {address.get('street', 'N/A')}\")\n                        print(f\"         City: {address.get('city', 'N/A')}\")\n                        print(f\"         State: {address.get('state', 'N/A')}\")\n                        print(f\"         ZIP: {address.get('zip_code', 'N/A')}\")\n                        \n                    # Settings details\n                    settings = restaurant.get('settings', {})\n                    if isinstance(settings, dict) and settings:\n                        print(f\"      Settings:\")\n                        print(f\"         Cuisine: {settings.get('cuisine_type', 'N/A')}\")\n                        print(f\"         Price Range: {settings.get('price_range', 'N/A')}\")\n                        print(f\"         Reservations: {settings.get('accepts_reservations', 'N/A')}\")\n                        print(f\"         Delivery: {settings.get('delivery_available', 'N/A')}\")\n                        \n                else:\n                    APITestHelper.print_test_step(\"Restaurant details missing required fields\", \"FAILED\")\n                    \n                self.results.add_success(\"restaurants\", \"Restaurant details\", {\n                    \"response_time\": response_time,\n                    \"restaurant_id\": restaurant_id,\n                    \"restaurant_name\": restaurant.get('name')\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(f\"Restaurant {restaurant_id} not found\", \"FAILED\")\n                self.results.add_failure(\"restaurants\", \"Restaurant details\", \n                                       f\"Restaurant not found: {restaurant_id}\", 404)\n                return False\n                \n            else:\n                APITestHelper.print_test_step(f\"Restaurant details failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"restaurants\", \"Restaurant details\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Restaurant details error: {e}\", \"FAILED\")\n            self.results.add_failure(\"restaurants\", \"Restaurant details\", str(e))\n            return False\n            \n    async def test_organizations_list(self) -> bool:\n        \"\"\"Test listing organizations (if available)\"\"\"\n        \n        APITestHelper.print_test_header(\"Organizations List\", \"🏛️\")\n        \n        try:\n            start_time = time.time()\n            response = await self.client.get(\"/api/v1/organizations\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                organizations = response.json()\n                \n                APITestHelper.print_test_step(f\"Organizations endpoint responding ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                if isinstance(organizations, list):\n                    org_count = len(organizations)\n                    APITestHelper.print_test_step(f\"Found {org_count} organizations\", \"SUCCESS\")\n                    \n                    if organizations:\n                        sample_org = organizations[0]\n                        print(f\"   🏛️ Sample Organization:\")\n                        print(f\"      Name: {sample_org.get('name', 'N/A')}\")\n                        print(f\"      Type: {sample_org.get('organization_type', 'N/A')}\")\n                        print(f\"      Tier: {sample_org.get('subscription_tier', 'N/A')}\")\n                        \n                elif isinstance(organizations, dict) and 'items' in organizations:\n                    org_list = organizations['items']\n                    APITestHelper.print_test_step(f\"Found {len(org_list)} organizations (paginated)\", \"SUCCESS\")\n                    \n                self.results.add_success(\"organizations\", \"List organizations\", {\n                    \"response_time\": response_time,\n                    \"count\": org_count if isinstance(organizations, list) else len(organizations.get('items', []))\n                })\n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"Organizations endpoint not found (may not be implemented in Phase 1)\", \"SKIPPED\")\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Organizations list failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"organizations\", \"List organizations\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Organizations list error: {e}\", \"FAILED\")\n            self.results.add_failure(\"organizations\", \"List organizations\", str(e))\n            return False\n            \n    async def test_restaurant_settings(self, restaurant_id: str = None) -> bool:\n        \"\"\"Test restaurant settings endpoint (if available)\"\"\"\n        \n        APITestHelper.print_test_header(\"Restaurant Settings\", \"⚙️\")\n        \n        # Get restaurant ID if not provided\n        if not restaurant_id:\n            try:\n                response = await self.client.get(\"/api/v1/restaurants\", headers=self.auth_headers)\n                if response.status_code == 200:\n                    restaurants = response.json()\n                    \n                    if isinstance(restaurants, list) and restaurants:\n                        restaurant_id = restaurants[0]['id']\n                    elif isinstance(restaurants, dict) and restaurants.get('items'):\n                        restaurant_id = restaurants['items'][0]['id']\n                    else:\n                        APITestHelper.print_test_step(\"No restaurants available for settings testing\", \"SKIPPED\")\n                        return True\n                else:\n                    APITestHelper.print_test_step(\"Cannot fetch restaurants for settings testing\", \"SKIPPED\")\n                    return True\n            except Exception:\n                APITestHelper.print_test_step(\"Cannot fetch restaurants for settings testing\", \"SKIPPED\")\n                return True\n                \n        try:\n            start_time = time.time()\n            response = await self.client.get(f\"/api/v1/restaurants/{restaurant_id}/settings\", headers=self.auth_headers)\n            response_time = (time.time() - start_time) * 1000\n            \n            if response.status_code == 200:\n                settings = response.json()\n                \n                APITestHelper.print_test_step(f\"Restaurant settings retrieved ({response_time:.0f}ms)\", \"SUCCESS\")\n                \n                if isinstance(settings, dict):\n                    print(f\"   ⚙️ Settings:\")\n                    for key, value in settings.items():\n                        print(f\"      {key}: {value}\")\n                        \n                    self.results.add_success(\"restaurant_settings\", \"Get settings\", {\n                        \"response_time\": response_time,\n                        \"restaurant_id\": restaurant_id,\n                        \"settings_count\": len(settings)\n                    })\n                else:\n                    APITestHelper.print_test_step(\"Settings format is invalid\", \"FAILED\")\n                    \n                return True\n                \n            elif response.status_code == 404:\n                APITestHelper.print_test_step(\"Restaurant settings endpoint not found (may not be implemented)\", \"SKIPPED\")\n                return True\n                \n            else:\n                APITestHelper.print_test_step(f\"Restaurant settings failed: HTTP {response.status_code}\", \"FAILED\")\n                self.results.add_failure(\"restaurant_settings\", \"Get settings\", \n                                       f\"HTTP {response.status_code}\", response.status_code)\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Restaurant settings error: {e}\", \"FAILED\")\n            self.results.add_failure(\"restaurant_settings\", \"Get settings\", str(e))\n            return False\n            \n    async def test_restaurant_analytics(self) -> bool:\n        \"\"\"Test restaurant analytics endpoints (if available)\"\"\"\n        \n        APITestHelper.print_test_header(\"Restaurant Analytics\", \"📊\")\n        \n        analytics_endpoints = [\n            (\"/api/v1/analytics/restaurants\", \"Restaurant analytics\"),\n            (\"/api/v1/restaurants/analytics\", \"Alternative analytics\"),\n            (\"/api/v1/analytics/summary\", \"Analytics summary\")\n        ]\n        \n        success_found = False\n        \n        for endpoint, description in analytics_endpoints:\n            try:\n                start_time = time.time()\n                response = await self.client.get(endpoint, headers=self.auth_headers)\n                response_time = (time.time() - start_time) * 1000\n                \n                if response.status_code == 200:\n                    APITestHelper.print_test_step(f\"{description} available ({response_time:.0f}ms)\", \"SUCCESS\")\n                    \n                    analytics_data = response.json()\n                    if isinstance(analytics_data, dict):\n                        print(f\"   📊 Analytics data keys: {list(analytics_data.keys())}\")\n                    elif isinstance(analytics_data, list):\n                        print(f\"   📊 Analytics items: {len(analytics_data)}\")\n                        \n                    self.results.add_success(\"restaurant_analytics\", description, {\n                        \"endpoint\": endpoint,\n                        \"response_time\": response_time\n                    })\n                    success_found = True\n                    \n                elif response.status_code == 404:\n                    APITestHelper.print_test_step(f\"{description} not found (may not be implemented)\", \"SKIPPED\")\n                    \n                else:\n                    APITestHelper.print_test_step(f\"{description} failed: HTTP {response.status_code}\", \"FAILED\")\n                    \n                await asyncio.sleep(0.1)\n                \n            except Exception as e:\n                APITestHelper.print_test_step(f\"{description} error: {e}\", \"FAILED\")\n                \n        if not success_found:\n            APITestHelper.print_test_step(\"No analytics endpoints found (may not be implemented yet)\", \"SKIPPED\")\n            \n        return True  # Not a failure if analytics aren't implemented\n        \n    async def test_multi_tenant_isolation(self) -> bool:\n        \"\"\"Test multi-tenant data isolation\"\"\"\n        \n        APITestHelper.print_test_header(\"Multi-Tenant Isolation\", \"🔒\")\n        \n        try:\n            # Test that current user only sees their organization's restaurants\n            response = await self.client.get(\"/api/v1/restaurants\", headers=self.auth_headers)\n            \n            if response.status_code == 200:\n                restaurants = response.json()\n                \n                if isinstance(restaurants, list):\n                    restaurant_list = restaurants\n                elif isinstance(restaurants, dict) and 'items' in restaurants:\n                    restaurant_list = restaurants['items']\n                else:\n                    restaurant_list = []\n                    \n                if restaurant_list:\n                    # Check that all restaurants belong to the same organization\n                    org_ids = set()\n                    for restaurant in restaurant_list:\n                        org_id = restaurant.get('organization_id')\n                        if org_id:\n                            org_ids.add(org_id)\n                            \n                    if len(org_ids) <= 1:\n                        APITestHelper.print_test_step(f\"Tenant isolation verified ({len(org_ids)} organization(s))\", \"SUCCESS\")\n                        \n                        if org_ids:\n                            org_id = list(org_ids)[0]\n                            print(f\"   🔒 Organization ID: {org_id}\")\n                            print(f\"   🏢 Restaurants in scope: {len(restaurant_list)}\")\n                            \n                        self.results.add_success(\"multi_tenant\", \"Tenant isolation\", {\n                            \"organization_count\": len(org_ids),\n                            \"restaurant_count\": len(restaurant_list)\n                        })\n                    else:\n                        APITestHelper.print_test_step(f\"Tenant isolation issue: {len(org_ids)} organizations visible\", \"FAILED\")\n                        self.results.add_failure(\"multi_tenant\", \"Tenant isolation\", \n                                               f\"Multiple organizations visible: {org_ids}\")\n                        return False\n                        \n                else:\n                    APITestHelper.print_test_step(\"No restaurants found for isolation testing\", \"SKIPPED\")\n                    \n                return True\n                \n            else:\n                APITestHelper.print_test_step(\"Cannot test tenant isolation due to API error\", \"FAILED\")\n                return False\n                \n        except Exception as e:\n            APITestHelper.print_test_step(f\"Tenant isolation test error: {e}\", \"FAILED\")\n            self.results.add_failure(\"multi_tenant\", \"Tenant isolation\", str(e))\n            return False\n            \n    async def test_restaurant_search_and_filtering(self) -> bool:\n        \"\"\"Test restaurant search and filtering functionality\"\"\"\n        \n        APITestHelper.print_test_header(\"Restaurant Search & Filtering\", \"🔍\")\n        \n        # Test various filtering scenarios\n        filter_tests = [\n            (\"/api/v1/restaurants?active=true\", \"Active restaurants only\"),\n            (\"/api/v1/restaurants?cuisine=italian\", \"Italian restaurants\"),\n            (\"/api/v1/restaurants?search=pizza\", \"Search for 'pizza'\"),\n            (\"/api/v1/restaurants?limit=5\", \"Limited results\"),\n            (\"/api/v1/restaurants?sort=name\", \"Sorted by name\")\n        ]\n        \n        all_success = True\n        \n        for endpoint, description in filter_tests:\n            try:\n                start_time = time.time()\n                response = await self.client.get(endpoint, headers=self.auth_headers)\n                response_time = (time.time() - start_time) * 1000\n                \n                if response.status_code in [200, 404]:  # 404 is OK for no results\n                    APITestHelper.print_test_step(f\"{description} ({response_time:.0f}ms)\", \"SUCCESS\")\n                    \n                    if response.status_code == 200:\n                        data = response.json()\n                        if isinstance(data, list):\n                            count = len(data)\n                        elif isinstance(data, dict) and 'items' in data:\n                            count = len(data['items'])\n                        else:\n                            count = 0\n                            \n                        print(f\"   📊 Results: {count} restaurants\")\n                        \n                    self.results.add_success(\"restaurant_filtering\", description, {\n                        \"endpoint\": endpoint,\n                        \"response_time\": response_time,\n                        \"status_code\": response.status_code\n                    })\n                    \n                else:\n                    APITestHelper.print_test_step(f\"{description} failed: HTTP {response.status_code}\", \"FAILED\")\n                    self.results.add_failure(\"restaurant_filtering\", description, \n                                           f\"HTTP {response.status_code}\", response.status_code)\n                    all_success = False\n                    \n                # Small delay between requests\n                await asyncio.sleep(0.2)\n                \n            except Exception as e:\n                APITestHelper.print_test_step(f\"{description} error: {e}\", \"FAILED\")\n                self.results.add_failure(\"restaurant_filtering\", description, str(e))\n                all_success = False\n                \n        return all_success\n        \n    def print_restaurant_test_summary(self):\n        \"\"\"Print comprehensive restaurant test summary\"\"\"\n        \n        APITestHelper.print_test_header(\"Restaurant Read Tests Summary\", \"📊\")\n        \n        print(f\"Total Tests: {self.results.total_tests}\")\n        print(f\"Passed: {self.results.passed_tests}\")\n        print(f\"Failed: {self.results.failed_tests}\")\n        print(f\"Success Rate: {self.results.success_rate:.1f}%\")\n        \n        # Group results by category\n        categories = {}\n        for result in self.results.results:\n            category = result.category\n            if category not in categories:\n                categories[category] = {\"passed\": 0, \"failed\": 0}\n                \n            if result.success:\n                categories[category][\"passed\"] += 1\n            else:\n                categories[category][\"failed\"] += 1\n                \n        print(f\"\\n📋 Results by Category:\")\n        for category, stats in categories.items():\n            total = stats[\"passed\"] + stats[\"failed\"]\n            rate = (stats[\"passed\"] / total) * 100 if total > 0 else 0\n            print(f\"   {category.replace('_', ' ').title()}: {stats['passed']}/{total} ({rate:.1f}%)\")\n            \n        # Performance summary\n        perf_results = [r for r in self.results.results if r.response_time > 0]\n        if perf_results:\n            avg_response_time = sum(r.response_time for r in perf_results) / len(perf_results)\n            print(f\"\\n⚡ Average Response Time: {avg_response_time:.0f}ms\")\n            \n        # Show failures if any\n        if self.results.failed_tests > 0:\n            print(f\"\\n❌ Failed Tests:\")\n            for result in self.results.results:\n                if not result.success:\n                    print(f\"   • {result.category}: {result.test_name} - {result.error_message}\")\n                    \n    async def run_comprehensive_restaurant_tests(self) -> bool:\n        \"\"\"Run all restaurant read tests\"\"\"\n        \n        print(\"🏢 RMS Restaurant Read Operations Tests\")\n        print(\"=\"*50)\n        \n        start_time = time.time()\n        \n        try:\n            # Setup authentication\n            if not await self.setup_authentication():\n                return False\n                \n            # Run all restaurant tests\n            tests = [\n                (\"Restaurants List\", self.test_restaurants_list),\n                (\"Restaurant Details\", self.test_restaurant_details),\n                (\"Organizations List\", self.test_organizations_list),\n                (\"Restaurant Settings\", self.test_restaurant_settings),\n                (\"Restaurant Analytics\", self.test_restaurant_analytics),\n                (\"Multi-Tenant Isolation\", self.test_multi_tenant_isolation),\n                (\"Restaurant Search & Filtering\", self.test_restaurant_search_and_filtering)\n            ]\n            \n            overall_success = True\n            \n            for test_name, test_func in tests:\n                try:\n                    success = await test_func()\n                    if not success:\n                        overall_success = False\n                        \n                except Exception as e:\n                    APITestHelper.print_test_step(f\"{test_name} failed with error: {e}\", \"FAILED\")\n                    self.results.add_failure(\"general\", test_name, str(e))\n                    overall_success = False\n                    \n                # Small delay between test categories\n                await asyncio.sleep(0.5)\n                \n            # Calculate execution time\n            self.results.execution_time = time.time() - start_time\n            \n            # Print summary\n            self.print_restaurant_test_summary()\n            \n            return overall_success\n            \n        except KeyboardInterrupt:\n            print(\"\\n⚠️  Restaurant tests interrupted by user\")\n            return False\n        except Exception as e:\n            print(f\"\\n❌ Restaurant tests failed: {e}\")\n            return False\n        finally:\n            await self.client.close()\n\n\nasync def main():\n    \"\"\"Main entry point for restaurant read testing\"\"\"\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Test RMS restaurant read operations\")\n    parser.add_argument(\"--base-url\", default=\"http://localhost:8000\", help=\"API base URL\")\n    \n    args = parser.parse_args()\n    \n    tester = RestaurantReadTester(args.base_url)\n    \n    try:\n        success = await tester.run_comprehensive_restaurant_tests()\n        \n        if success:\n            print(f\"\\n✅ All restaurant read tests passed successfully!\")\n        else:\n            print(f\"\\n❌ Some restaurant read tests failed\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"❌ Restaurant read testing failed: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"